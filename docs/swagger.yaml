basePath: /api/v1
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  main.createUserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - confirm_password
    - email
    - password
    - username
    type: object
  main.dispatcherAppResponse:
    properties:
      created_at:
        type: string
      driver_license:
        type: string
      id:
        type: string
      status:
        description: pending, approved, rejected
        type: string
      user_id:
        type: string
      vehicle_model:
        type: string
      vehicle_plate_number:
        type: string
      vehicle_type:
        type: string
      vehicle_year:
        type: integer
    type: object
  main.dispatcherApplyRequest:
    properties:
      driver_license:
        type: string
      vehicle_model:
        type: string
      vehicle_plate_number:
        type: string
      vehicle_type:
        enum:
        - car
        - motorcycle
        type: string
      vehicle_year:
        type: integer
    required:
    - driver_license
    - vehicle_model
    - vehicle_plate_number
    - vehicle_type
    - vehicle_year
    type: object
  main.healthResponse:
    properties:
      api_version:
        type: string
      environment:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  main.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.loginResponse:
    properties:
      token:
        type: string
    type: object
  main.updatePasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        type: string
      old_password:
        type: string
    required:
    - confirm_password
    - new_password
    - old_password
    type: object
  main.userProfileUpdateRequest:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  main.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: digitalmarketfy@gmail.com
    name: Puremike
    url: http://github.com/puremike
  description: This is an API for a Courier Delivery System
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Courier Delivery System API
  version: 1.1.0
paths:
  /admin/approve-dispatcher/{userID}:
    patch:
      consumes:
      - application/json
      description: Approve or Deny a dispatcher
      parameters:
      - description: Dispatcher Application ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'success: application rejected'
          schema:
            additionalProperties:
              type: string
            type: object
        "201":
          description: 'success: application approved'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Approve or Deny a dispatcher application
      tags:
      - DispatchersApply
  /admin/dispatcher-applications:
    get:
      consumes:
      - application/json
      description: Get All Dispatcher Applications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.dispatcherAppResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get Dispatcher Applications
      tags:
      - DispatchersApply
  /admin/dispatcher-applications/{id}:
    get:
      consumes:
      - application/json
      description: Get Dispatcher Application by ID
      parameters:
      - description: Dispatcher Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.dispatcherAppResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get Dispatcher Application
      tags:
      - DispatchersApply
  /admin/user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create user manually
      tags:
      - Admin
  /admin/user/{id}:
    patch:
      consumes:
      - application/json
      description: Update Current User Profile
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: update credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.userProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Admin
  /admin/users/:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - Admin
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - Admin
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Update Current User Password
      parameters:
      - description: update credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.updatePasswordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: password updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password, and returns a JWT
        token on success.
      parameters:
      - description: Login credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.loginResponse'
        "400":
          description: Bad Request - invalid input
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Login User
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get Current User Profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create user
      tags:
      - Auth
  /auth/update-profile:
    patch:
      consumes:
      - application/json
      description: Update Current User Profile
      parameters:
      - description: update credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.userProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.userResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Auth
  /dispatchers/apply:
    post:
      consumes:
      - application/json
      description: Apply as a dispatcher
      parameters:
      - description: Dispatcher Application payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.dispatcherApplyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.dispatcherAppResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create dispatcher application
      tags:
      - DispatchersApply
  /health:
    get:
      consumes:
      - application/json
      description: Returns the status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.healthResponse'
      summary: Get health
      tags:
      - health
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: 'Use a valid JWT token. Format: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
